#!/usr/bin/env node
var config = require('./utils/get-config')();
var PathsExist = require('./utils/paths-exist');
var path = require('path');
var log = require('./utils/log');
var Run = require('./utils/run');
var CommanderWrapper = require('./utils/commander-wrapper');
var Promise = require('bluebird');

var program = CommanderWrapper(function(commander) {
  return commander
    .option('-w, --watch', 'keep the tester running and run as things change')
    .option('-b, --browsers <list,of,browsers>', 'comma seperated list of browsers to run on')
    .option('-nb, --no-build', 'dont build before testing')
    .option('-p, --port <port>', 'port for karma server')
    .option('-nl, --no-lint', 'dont lint before testing');
});

program.port = program.port || process.env.TEST_PORT || 9876;

var KARMA_BROWSERS = ['Chrome', 'Firefox', 'IE', 'Safari'];
var commands = [];
var karmaCommand = [
  'karma',
  'start',
  'karma.config.js',
  '--port', program.port
];

if (program.watch) {
  karmaCommand.push('--auto-watch');
  karmaCommand.push('--no-single-run');
} else  {
  karmaCommand.push('--no-auto-watch');
  karmaCommand.push('--single-run');
}

if (program.browsers) {
  program.browsers = program.browsers.split(',');
  var browsers = [];

  program.browsers.forEach(function(userBrowser) {
    userBrowser = userBrowser.trim();
    var found = false;
    KARMA_BROWSERS.forEach(function(karmaBrowser) {
      // seach faster
      if (found) {
        return;
      }
      var regexp = new RegExp(karmaBrowser, 'i');
      if (regexp.test(userBrowser)) {
        // don't add the same browser more than once
        if (browsers.indexOf(karmaBrowser) === -1) {
          browsers.push(karmaBrowser);
        }

        found = true;
      }
    });

    if (found !== true) {
      log.fatal('invalid browser entry: ' + userBrowser);
      process.exit(1);
    }
  });

  karmaCommand.push('--browsers');
  karmaCommand.push(browsers.join(','));
}

commands.push(karmaCommand);

if (program.lint && !program.watch) {
  commands.unshift(['sb-lint']);
}


var buildPromise = Promise.resolve();
if (program.build && !program.watch) {
  buildPromise = Run.one('sb-build');
}

buildPromise.then(function() {
  return Run.series(commands, {failAfter: true});
})
